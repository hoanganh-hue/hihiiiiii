#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CCCD Module Wrapper - PRODUCTION
Wrapper Python ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c module CCCD thu·∫ßn Python.
Tri·ªÉn khai th·ª±c t·∫ø v·ªõi d·ªØ li·ªáu th·∫≠t t·ª´ API ch√≠nh th·ª©c.
"""

import sys
from pathlib import Path
from typing import List, Dict, Optional, Tuple

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√† th∆∞ m·ª•c cccd
project_root = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / 'cccd'))

try:
    from cccd.cccd_generator_service import CCCDGeneratorService
    from cccd.cccd_generator_enhanced import CCCDGeneratorEnhanced
    from cccd.cccd_analyzer_service import CCCDAnalyzerService
except ImportError:
    print("Error: Kh√¥ng th·ªÉ import CCCD services.")
    print("Vui l√≤ng ƒë·∫£m b·∫£o th∆∞ m·ª•c cccd t·ªìn t·∫°i v√† c√≥ th·ªÉ truy c·∫≠p.")
    class CCCDGeneratorService:
        def __init__(self, *args, **kwargs):
            raise RuntimeError("CCCDGeneratorService kh√¥ng th·ªÉ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
    class CCCDGeneratorEnhanced:
        def __init__(self, *args, **kwargs):
            raise RuntimeError("CCCDGeneratorEnhanced kh√¥ng th·ªÉ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
    class CCCDAnalyzerService:
        def __init__(self, *args, **kwargs):
            raise RuntimeError("CCCDAnalyzerService kh√¥ng th·ªÉ ƒë∆∞·ª£c kh·ªüi t·∫°o.")

class CCCDWrapper:
    """
    Wrapper class ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c module CCCD b·∫±ng Python thu·∫ßn.
    """
    
    def __init__(self, use_enhanced: bool = True):
        """
        Kh·ªüi t·∫°o CCCD Wrapper.
        
        Args:
            use_enhanced: S·ª≠ d·ª•ng generator enhanced (True) hay generator c≈© (False)
        """
        try:
            if use_enhanced:
                self.generator = CCCDGeneratorEnhanced()
                self.generator_type = "enhanced"
            else:
                self.generator = CCCDGeneratorService()
                self.generator_type = "standard"
            
            self.analyzer = CCCDAnalyzerService()
        except Exception as e:
            print(f"L·ªói khi kh·ªüi t·∫°o c√°c service CCCD: {e}")
            self.generator = None
            self.analyzer = None
            self.generator_type = None

    def generate_cccd_list(self, 
                          province_codes: List[str] = None, 
                          quantity: int = 10,
                          gender: str = None,
                          birth_year_range: tuple = None,
                          use_enhanced: bool = None) -> Dict:
        """
        T·∫°o danh s√°ch s·ªë CCCD.
        
        Args:
            province_codes: Danh s√°ch m√£ t·ªânh/th√†nh (VD: ['001', '079'])
            quantity: S·ªë l∆∞·ª£ng CCCD c·∫ßn t·∫°o
            gender: Gi·ªõi t√≠nh ('Nam' ho·∫∑c 'N·ªØ', None ƒë·ªÉ random)
            birth_year_range: Kho·∫£ng nƒÉm sinh (tuple: (min_year, max_year))
            use_enhanced: S·ª≠ d·ª•ng generator enhanced (None = d√πng generator hi·ªán t·∫°i)
            
        Returns:
            Dict ch·ª©a danh s√°ch c√°c s·ªë CCCD ƒë√£ t·∫°o (d·∫°ng List[str]).
        """
        if not self.generator:
            return {"success": False, "error": "CCCD Generator kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o."}

        try:
            # S·ª≠ d·ª•ng generator enhanced n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if use_enhanced is True and self.generator_type != "enhanced":
                self.generator = CCCDGeneratorEnhanced()
                self.generator_type = "enhanced"
            elif use_enhanced is False and self.generator_type != "standard":
                self.generator = CCCDGeneratorService()
                self.generator_type = "standard"

            if self.generator_type == "enhanced":
                # S·ª≠ d·ª•ng generator enhanced
                result = self.generator.generate_cccd_list_enhanced(
                    province_codes=province_codes,
                    gender=gender,
                    birth_year_range=birth_year_range,
                    quantity=quantity,
                    validate_output=True
                )
                
                if result["success"]:
                    # Tr√≠ch xu·∫•t danh s√°ch CCCD numbers
                    cccd_numbers = [item['cccd_number'] for item in result["data"] if item.get("valid")]
                    
                    return {
                        "success": True, 
                        "data": cccd_numbers,
                        "metadata": result.get("metadata", {}),
                        "generator_type": "enhanced"
                    }
                else:
                    return {"success": False, "error": result.get("error", "Unknown error")}
            else:
                # S·ª≠ d·ª•ng generator standard
                birth_year_list = list(birth_year_range) if birth_year_range else None

                detailed_results = self.generator.generateCccdList(
                    provinceCodes=province_codes,
                    quantity=quantity,
                    gender=gender,
                    birthYearRange=birth_year_list
                )

                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p service tr·∫£ v·ªÅ l·ªói
                if isinstance(detailed_results, dict) and 'error' in detailed_results:
                     return {"success": False, "error": detailed_results['error']}

                # Tr√≠ch xu·∫•t ra danh s√°ch c√°c s·ªë CCCD (List[str]) ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi main.py
                cccd_numbers = [item['cccd_number'] for item in detailed_results]

                return {
                    "success": True, 
                    "data": cccd_numbers,
                    "generator_type": "standard"
                }

        except Exception as e:
            return {"success": False, "error": f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong CCCDWrapper: {e}"}

    def analyze_cccd(self, cccd: str, detailed: bool = True) -> Dict:
        """
        Ph√¢n t√≠ch c·∫•u tr√∫c s·ªë CCCD.
        """
        if not self.analyzer:
            return {"success": False, "error": "CCCDAnalyzerService kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o."}
        
        try:
            analysis = self.analyzer.analyzeCccdStructure(cccd, detailed=detailed)
            return {"success": True, "data": analysis}
        except Exception as e:
            return {"success": False, "error": f"L·ªói khi ph√¢n t√≠ch CCCD: {e}"}
    
    def validate_cccd(self, cccd: str) -> Dict:
        """
        Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa s·ªë CCCD.
        """
        if not self.analyzer:
            return {"success": False, "error": "CCCDAnalyzerService kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o."}
        
        try:
            validation = self.analyzer.validateCccdFormat(cccd)
            return {"success": True, "data": validation}
        except Exception as e:
            return {"success": False, "error": f"L·ªói khi validate CCCD: {e}"}
    
    def get_performance_stats(self) -> Dict:
        """
        L·∫•y th·ªëng k√™ hi·ªáu su·∫•t (ch·ªâ c√≥ v·ªõi generator enhanced).
        """
        if self.generator_type == "enhanced" and hasattr(self.generator, 'get_performance_stats'):
            try:
                return {"success": True, "data": self.generator.get_performance_stats()}
            except Exception as e:
                return {"success": False, "error": f"L·ªói khi l·∫•y th·ªëng k√™: {e}"}
        else:
            return {"success": False, "error": "Ch·ª©c nƒÉng ch·ªâ c√≥ v·ªõi generator enhanced"}

# Test functions
if __name__ == "__main__":
    try:
        print("‚ñ∂Ô∏è  B·∫Øt ƒë·∫ßu ki·ªÉm tra CCCDWrapper...")
        cccd_wrapper = CCCDWrapper()
        
        if not cccd_wrapper.generator:
            raise RuntimeError("Kh√¥ng th·ªÉ kh·ªüi t·∫°o CCCDGeneratorService.")

        print("\n=== Test: T·∫°o 3 CCCD ·ªü H√† N·ªôi ===")
        result = cccd_wrapper.generate_cccd_list(province_codes=['001'], quantity=3)
        if result['success']:
            cccd_list = result['data']
            print(f"‚úÖ Th√†nh c√¥ng! T·∫°o ƒë∆∞·ª£c {len(cccd_list)} s·ªë CCCD:")
            for cccd_number in cccd_list:
                print(f"   - {cccd_number}")
        else:
            print(f"‚ùå Th·∫•t b·∫°i: {result.get('error')}")
                
    except Exception as e:
        print(f"\nüö® L·ªói nghi√™m tr·ªçng khi ki·ªÉm tra wrapper: {e}")